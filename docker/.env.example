# (Required) Replace the credentials with your own!
# Generate new secret keys with the following Python command:
# ```python
# import os
# import binascii
# print("AES_ENCRYPTION_KEY:", binascii.hexlify(os.urandom(32)).decode())
# print("JWT_SECRET_KEY:", binascii.hexlify(os.urandom(32)).decode())
# ```
AES_ENCRYPTION_KEY=b90e4648ad699c3bdf62c0860e09eb9efc098ee75f215bf750847ae19d41e4b0
JWT_SECRET_KEY=dbefe42f34473990a3fa903a6a3283acdc3a910beb1ae271a6463ffa5a926bfb

# (Required) The default admin credentials
DEFAULT_ADMIN_USERNAME=admin
DEFAULT_ADMIN_PASSWORD=TaskingAI321

# (Required) Set to `local` if you want to locally store files and images generated the application;
# Set to `s3` if you want to store files and images on an **public-accessible** S3 bucket;
# Only `local` and `s3` acceptable
OBJECT_STORAGE_TYPE=local

# (Optional) s3 related configurations, compulsory if OBJECT_STORAGE_TYPE is set to `s3`
S3_ENDPOINT=https://s3.us-east-1.amazonaws.com
S3_BUCKET_NAME=my-bucket
S3_ACCESS_KEY_ID=my_s3_access_key_id
S3_ACCESS_KEY_SECRET=my_s3_access_key_secret
# set your s3 bucket public domain to allow public access to the files
S3_BUCKET_PUBLIC_DOMAIN=https://mybucket.example.com

# (Required) The host url indicates the base url of the application.
# It is used to generate the public URLs of the files and images.
# for public host:
# HOST_URL=https://www.example.com
# for LAN host:
# HOST_URL=http://192.168.3.16:8080
# for local host:
HOST_URL=http://localhost:8080

# (Required) Project ID is always `taskingai`.
PROJECT_ID=taskingai

# (Required) Postgres DB credentials
POSTGRES_DB=taskingai
POSTGRES_USER=postgres
POSTGRES_PASSWORD=TaskingAI321

# (Required) Redis credentials
REDIS_DB=0
REDIS_PASSWORD=TaskingAI321
