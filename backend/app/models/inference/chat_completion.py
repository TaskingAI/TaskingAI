from enum import Enum
from typing import Optional, List, Union
from pydantic import BaseModel, Field
from abc import ABCMeta
from .chat_completion_function import ChatCompletionFunctionCall


__all__ = [
    "ChatCompletionRole",
    "ChatCompletionMessage",
    "ChatCompletionSystemMessage",
    "ChatCompletionUserMessage",
    "ChatCompletionAssistantMessage",
    "ChatCompletionFunctionMessage",
    "ChatCompletionAnyMessage",
    "ChatCompletionFinishReason",
    "ChatCompletion",
    "ChatCompletionChunk",
]


class ChatCompletionRole(str, Enum):
    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    FUNCTION = "function"


class ChatCompletionMessage(BaseModel, metaclass=ABCMeta):
    content: Optional[str] = Field(
        None,
        description="The content of the message.",
        examples=["What is the sum of 12 + 23?"],
    )


class ChatCompletionSystemMessage(ChatCompletionMessage):
    role: ChatCompletionRole = Field(
        ...,
        Literal=ChatCompletionRole.SYSTEM,
        description="The role of the message, which is always 'system' for a system message",
        examples=["system"],
    )


class ChatCompletionUserMessage(ChatCompletionMessage):
    role: ChatCompletionRole = Field(
        ...,
        Literal=ChatCompletionRole.USER,
        description="The role of the message, which is always 'user' for a user message",
        examples=["user"],
    )


class ChatCompletionAssistantMessage(ChatCompletionMessage):
    role: ChatCompletionRole = Field(
        ...,
        Literal=ChatCompletionRole.ASSISTANT,
        description="The role of the message, which is always 'assistant' for an assistant message",
        examples=["assistant"],
    )

    function_calls: Optional[List[ChatCompletionFunctionCall]] = Field(
        None,
        description="The function calls requested by the assistant.",
    )


class ChatCompletionFunctionMessage(ChatCompletionMessage):
    role: ChatCompletionRole = Field(
        ...,
        Literal=ChatCompletionRole.FUNCTION,
        description="The role of the message, which is always 'function' for a function message",
        examples=["function"],
    )

    id: str = Field(
        ...,
        description="The corresponding id of the tool requested by the assistant.",
        examples=["call_abc123"],
    )


ChatCompletionAnyMessage = Union[
    ChatCompletionFunctionMessage,
    ChatCompletionAssistantMessage,
    ChatCompletionUserMessage,
    ChatCompletionSystemMessage,
]


class ChatCompletionUsage(BaseModel):
    input_tokens: int = Field(
        ...,
        description="The number of tokens in the input.",
    )
    output_tokens: int = Field(
        ...,
        description="The number of tokens in the output.",
    )


class ChatCompletionFinishReason(str, Enum):
    STOP = "stop"
    LENGTH = "length"
    FUNCTION_CALLS = "function_calls"
    RECITATION = "recitation"
    ERROR = "error"
    UNKNOWN = "unknown"


class ChatCompletion(BaseModel):
    object: str = Field(
        "ChatCompletion",
        Literal="ChatCompletion",
        description="The object type, which is always 'ChatCompletion'.",
        examples=["ChatCompletion"],
    )

    finish_reason: ChatCompletionFinishReason = Field(
        ...,
        description="The reason why the generation is finished.",
        examples=["stop"],
    )

    message: ChatCompletionAssistantMessage = Field(
        ...,
        description="The message generated by the assistant.",
    )

    created_timestamp: int = Field(
        ...,
        description="The timestamp in milliseconds when the response is created.",
        examples=[1700000000000],
    )

    usage: ChatCompletionUsage = Field(
        ...,
        description="The token usage of the response.",
    )


class ChatCompletionChunk(BaseModel):
    object: str = Field(
        "ChatCompletionChunk",
        Literal="ChatCompletionChunk",
        description="The object type, which is always 'ChatCompletionChunk'.",
    )
    role: ChatCompletionRole = Field(
        "assistant",
        Literal=ChatCompletionRole.ASSISTANT,
        description="The role of the chunk.",
    )
    index: int = Field(
        ...,
        description="The index of the chunk in the message.",
    )
    delta: str = Field(
        ...,
        description="The delta content generated by the streaming inference.",
    )
    created_timestamp: int = Field(
        ...,
        description="The timestamp in milliseconds when the chunk is created.",
    )
