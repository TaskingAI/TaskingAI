name: Build and Test

on:
  pull_request:
    branches: ["master"]
    paths:
      - "backend/**"
      - "!**.md"

env:
  AES_ENCRYPTION_KEY: b90e4648ad699c3bdf62c0860e09eb9efc098ee75f215bf750847ae19d41e4b0
  JWT_SECRET_KEY: dbefe42f34473990a3fa903a6a3283acdc3a910beb1ae271a6463ffa5a926bfb

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    environment: test

    services:
      redis:
        image: bitnami/redis:6.2.0
        env:
          REDIS_PASSWORD: password
        ports:
          - 6379:6379
      postgres:
        image: docker.io/ankane/pgvector:v0.5.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      inference:
        image: taskingai/taskingai-inference:v0.2.0
        env:
          MODE: PROD
        ports:
          - 8001:8000
      plugin:
        image: taskingai/taskingai-plugin:v0.2.0
        env:
          MODE: PROD
        ports:
          - 8002:8000

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set short SHA
        run: echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_ENV

      - name: Check for git tag version
        id: get_tag
        run: |
          TAG=$(git describe --tags --exact-match 2> /dev/null || echo "")
          if [[ -n "$TAG" ]]; then
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Checkout Test Repository
        uses: actions/checkout@v2
        with:
          repository: TaskingAI/TaskingAI-Test
          ref: master
          path: TaskingAI-Test
          token: ${{ secrets.TASKINGAI_TEST_GH_PAT }}

      - name: Install Dependencies
        working-directory: backend
        run: pip install -r requirements.txt

      - name: Build Docker image
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        run: |
          docker build -t taskingai/taskingai-server:$IMAGE_TAG .
          echo "Build success: taskingai/taskingai-server:${IMAGE_TAG}"

      - name: Run Docker image - API
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          AES_ENCRYPTION_KEY: ${{ env.AES_ENCRYPTION_KEY }}
        run: |
          docker run --rm -d -p 8090:8000 \
          -e PURPOSE=API \
          -e POSTGRES_URL="postgresql+asyncpg://postgres:password@127.0.0.1:5432/test" \
          -e REDIS_URL="redis://:password@127.0.0.1:6379/0" -e \
          TASKINGAI_INFERENCE_URL=127.0.0.1:8001 -e \
          TASKINGAI_PLUGIN_URL=127.0.0.1:8002 -e \
          AES_ENCRYPTION_KEY=$AES_ENCRYPTION_KEY \
          taskingai/taskingai-server:$IMAGE_TAG

      - name: Run Docker image - WEB
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          AES_ENCRYPTION_KEY: ${{ env.AES_ENCRYPTION_KEY }}
          JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}
        run: |
          docker run --rm -d -p 8080:8000 \
          -e PURPOSE=WEB \
          -e POSTGRES_URL="postgresql+asyncpg://postgres:password@127.0.0.1:5432/test" \
          -e REDIS_URL="redis://:password@127.0.0.1:6379/0" \
          -e TASKINGAI_INFERENCE_URL=127.0.0.1:8001 \
          -e TASKINGAI_PLUGIN_URL=127.0.0.1:8002 \
          -e AES_ENCRYPTION_KEY=$AES_ENCRYPTION_KEY \
          -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
          taskingai/taskingai-server:$IMAGE_TAG

      - name: Wait for service to start
        run: sleep 10

      - name: Run WEB Tests
        working-directory: TaskingAI-Test
        run: bash ./community_app/run_test.sh

      - name: Run API Tests
        working-directory: TaskingAI-Test
        run: bash ./community_api/run_test.sh
