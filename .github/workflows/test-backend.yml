name: Backend - Build and Test

on:
  pull_request:
    branches: ["master"]
    paths:
      - "backend/**"
      - "!**.md"

env:
  AES_ENCRYPTION_KEY: b90e4648ad699c3bdf62c0860e09eb9efc098ee75f215bf750847ae19d41e4b0
  JWT_SECRET_KEY: dbefe42f34473990a3fa903a6a3283acdc3a910beb1ae271a6463ffa5a926bfb

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    environment: test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set short SHA
        run: echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_ENV

      - name: Check for git tag version
        id: get_tag
        run: |
          TAG=$(git describe --tags --exact-match 2> /dev/null || echo "")
          if [[ -n "$TAG" ]]; then
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Checkout Test Repository
        uses: actions/checkout@v2
        with:
          repository: TaskingAI/TaskingAI-Test
          ref: master
          path: TaskingAI-Test
          token: ${{ secrets.TASKINGAI_TEST_GH_PAT }}

      - name: Install Dependencies
        working-directory: backend
        run: pip install -r requirements.txt

      - name: Install Test Dependencies
        working-directory: backend
        run: pip install -r test_requirements.txt

      - name: Create Docker network
        run: docker network create taskingai-network

      - name: Run Docker image - Postgres
        run: |
          docker run --network taskingai-network -d --rm \
          -e POSTGRES_DB=taskingai \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=TaskingAI321 \
          --name db ankane/pgvector:v0.5.1

      - name: Run Docker image - Redis
        run: |
          docker run --network taskingai-network -d --rm \
          --name cache redis:7-alpine

      - name: Run Docker image - Inference
        run: docker run --network taskingai-network -d --rm -e MODE=TEST --name inference taskingai/taskingai-inference:v0.2.14

      - name: Run Docker image - Plugin
        run: docker run --network taskingai-network -d --rm -e MODE=TEST --name plugin taskingai/taskingai-plugin:v0.2.6

      - name: Download nltk data
        working-directory: backend
        run: |
          mkdir nltk_data
          python -m nltk.downloader -d nltk_data punkt

      - name: Build Docker image
        working-directory: backend
        run: |
          docker build -t taskingai/taskingai-server:$IMAGE_TAG .
          echo "Build success: taskingai/taskingai-server:${IMAGE_TAG}"

      - name: Run Docker image - WEB
        working-directory: backend
        env:
          AES_ENCRYPTION_KEY: ${{ env.AES_ENCRYPTION_KEY }}
          JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}
        run: |
          docker run --network taskingai-network --rm -d -p 8080:8000 \
          -e PURPOSE=WEB \
          -e POSTGRES_URL="postgres://postgres:TaskingAI321@db:5432/taskingai" \
          -e REDIS_URL="redis://cache:6379/0" \
          -e OBJECT_STORAGE_TYPE="local" \
          -e HOST_URL=http://127.0.0.1:8080 \
          -e PATH_TO_VOLUME="./storage" \
          -e PROJECT_ID="taskingai" \
          -e TASKINGAI_INFERENCE_URL=http://inference:8000 \
          -e TASKINGAI_PLUGIN_URL=http://plugin:8000 \
          -e AES_ENCRYPTION_KEY=$AES_ENCRYPTION_KEY \
          -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
          taskingai/taskingai-server:$IMAGE_TAG

      - name: Run R2 Docker image - API
        working-directory: backend
        env:
          AES_ENCRYPTION_KEY: ${{ env.AES_ENCRYPTION_KEY }}
          TEST_S3_SECRET_R2: ${{ secrets.TEST_S3_SECRET_R2 }}
        run: |
          echo "$TEST_S3_SECRET_R2" > r2.env
          docker run --name r2_docker  --network taskingai-network --rm -d -p 8090:8000 \
          --env-file r2.env \
          -e PURPOSE=API \
          -e POSTGRES_URL="postgres://postgres:TaskingAI321@db:5432/taskingai" \
          -e REDIS_URL="redis://cache:6379/0" \
          -e OBJECT_STORAGE_TYPE="s3" \
          -e PATH_TO_VOLUME="./storage" \
          -e PROJECT_ID="taskingai" \
          -e TASKINGAI_INFERENCE_URL=http://inference:8000 \
          -e TASKINGAI_PLUGIN_URL=http://plugin:8000 \
          -e AES_ENCRYPTION_KEY=$AES_ENCRYPTION_KEY \
          taskingai/taskingai-server:$IMAGE_TAG

      - name: Wait for service to start
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          INFERENCE_PROVIDER_CREDENTIALS: ${{ secrets.INFERENCE_PROVIDER_CREDENTIALS }}
          PLUGIN_BUNDLE_CREDENTIALS: ${{ secrets.PLUGIN_BUNDLE_CREDENTIALS }}
        run: |
          echo "$INFERENCE_PROVIDER_CREDENTIALS" >> .env
          echo "$PLUGIN_BUNDLE_CREDENTIALS" >> .env
          sleep 10

      - name: Run WEB Tests
        working-directory: backend
        run: bash ./run_web_test.sh

      - name: Run R2 API Tests
        working-directory: backend
        run: bash ./run_api_test.sh

      - name: Stop Docker container
        run: |
          docker stop r2_docker
          sleep 5

      - name: Run AWS Docker image - API
        working-directory: backend
        env:
          AES_ENCRYPTION_KEY: ${{ env.AES_ENCRYPTION_KEY }}
          TEST_S3_SECRET_AWS: ${{ secrets.TEST_S3_SECRET_AWS }}
        run: |
          echo "$TEST_S3_SECRET_AWS" > aws.env
          docker run --name aws_docker  --network taskingai-network --rm -d -p 8090:8000 \
          --env-file aws.env \
          -e PURPOSE=API \
          -e POSTGRES_URL="postgres://postgres:TaskingAI321@db:5432/taskingai" \
          -e REDIS_URL="redis://cache:6379/0" \
          -e OBJECT_STORAGE_TYPE="s3" \
          -e PATH_TO_VOLUME="./storage" \
          -e PROJECT_ID="taskingai" \
          -e TASKINGAI_INFERENCE_URL=http://inference:8000 \
          -e TASKINGAI_PLUGIN_URL=http://plugin:8000 \
          -e AES_ENCRYPTION_KEY=$AES_ENCRYPTION_KEY \
          taskingai/taskingai-server:$IMAGE_TAG

      - name: Run AWS API Tests
        working-directory: backend
        run: bash ./run_api_test.sh
