name: Frontend - Build and Release

on:
  push:
    tags:
      - "v*.*.*"
  pull_request:
    branches: ["master"]
    paths:
      - ".github/workflows/release-frontend.yml"

env:
  WORK_DIR: frontend
  ECR_REPOSITORY: console

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORK_DIR }}
    environment: test
    steps:
      ##################################################################
      #                        1. check version                        #
      ##################################################################

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Verify working directory
        run: pwd

      - name: Read Version
        id: version
        run: |
          IMAGE_TAG=$(jq -r '.version' package.json)
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Check if Docker image exists
        id: docker_image_check
        run: |
          if docker pull taskingai/taskingai-${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} > /dev/null 2>&1; then
            echo "Image exists"
            echo "::set-output name=exists::true"
          else
            echo "Image does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Skip remaining steps if image exists
        if: steps.docker_image_check.outputs.exists == 'true'
        run: |
          echo "Docker image already exists. Skipping remaining steps."
          exit 0

      ##################################################################
      #         2. build and push multi-platform docker images         #
      ##################################################################

      - name: Set up Docker Buildx
        if: steps.docker_image_check.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: steps.docker_image_check.outputs.exists != 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        if: steps.docker_image_check.outputs.exists != 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build multi-platform images and push to docker
        if: steps.docker_image_check.outputs.exists != 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.WORK_DIR }}
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: taskingai/taskingai-${{ env.ECR_REPOSITORY }}:latest,taskingai/taskingai-${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Image digest
        if: steps.docker_image_check.outputs.exists != 'true'
        run: |
          echo "Latest image digest: ${{ steps.docker_build.outputs.digest }}"
          echo "Tagged image digest: ${{ steps.docker_build.outputs.digest }}-${{ env.IMAGE_TAG }}"
